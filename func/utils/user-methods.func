() usr::notify(
    slice ntext, int dst,
    int fees, int in_coins, int out_coins,
    int line_price, int market_price, slice user_addr
) impure inline_ref {
    builder msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(user_addr)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(ntext);

    send_raw_message(msg.end_cell(), 1);

    builder event_body = begin_cell()
        .store_int(dst, 1)
        .store_coins(fees)
        .store_coins(in_coins)
        .store_coins(out_coins)
        .store_coins(line_price)
        .store_coins(market_price);

    event::emit(user_addr, event_body.end_cell());
}

() usr::refund_biton(slice destination, int amount) impure inline_ref {
    init_data();
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32) ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64) ;; query_id
        .store_coins(amount) ;; jetton amount
        .store_slice(destination) ;; sender addr
        .store_slice(my_address()) ;;  response_addr
        .store_int(0, 1) ;; custom payload
        .store_coins(0)  ;; forward ton amount
        .store_int(0, 1) ;; forward ton amount
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);
    return ();
}


() usr::buy_ton(int msg_value, slice sender_addr, int jetton_amount, int max_price) impure inline_ref {
    init_data();
    

    (int ton_amount, int m_price, int fee) = get_price_ton(jetton_amount);

    if (m_price > max_price) {
        usr::refund_biton(sender_addr, jetton_amount);
        return ();
    }

    throw_if(err::no_balance(), ton_amount >= int_gbl::balance);


    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_addr)
        .store_coins(ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(msg::biton_to_ton());
    
    send_raw_message(msg.end_cell(), 0);

    usr::notify(
        msg::biton_to_ton(), event_op::jettonton(),
        fee, jetton_amount, ton_amount,
        get_price(), m_price, sender_addr
    );

    biton_balance += jetton_amount;
    service_collect_fee += fee;
    pack_data();
}


() usr::buy_biton(int msg_value, slice sender_address, slice in_msg_body) impure {
    init_data();
    msg_value -= operation_price;
    msg_value -= 15000000; ;; 0,015 ton(notification)
    throw_if(err::small_trans(), msg_value <= 500000000);
    (int jetton_amount, int m_price, int fee) = get_price_biton(msg_value);

    throw_if(err::no_balance(), jetton_amount >= biton_balance);

    ;; see if there is anything else in the body. If not, add the maximum markup to the linear price. If yes, we take the maximum price
    int max_price = in_msg_body.slice_empty?() ? get_price() + division(multiply(get_price(), max_price_percentage), 1000) : in_msg_body~load_coins();


    throw_if(err::max_price(), m_price > max_price);

    ;; jetton wallet msg
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32) ;; 0xf8a7ea5
        .store_uint(cur_lt(), 64) ;; query_id
        .store_coins(jetton_amount) ;; jetton amount
        .store_slice(sender_address) ;; sender addr
        .store_slice(sender_address) ;;  response_addr
        .store_int(0, 1) ;; custom payload
        .store_coins(0)  ;; forward ton amount
        .store_int(0, 1) ;; forward ton amount
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_addr)
        .store_coins(operation_price)
        ;; last bit in 107 bits is "1", mean that body:(Either X ^X) in ref
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1);

    usr::notify(
        msg::ton_to_biton(), event_op::tonjetton(),
        fee, msg_value, jetton_amount,
        get_price(), m_price, sender_address
    );

    service_collect_fee += fee;
    biton_balance -= jetton_amount;
    pack_data();
}



