;; math logic 

int division(int a, int b) { ;; division with factor
    return a * 1000000000 / b;
}

int multiply(int a, int b) { ;; multiply with factor
    return a * b / 1000000000;
}

int minus_percent(int a, int percent, int factor) { ;; subtract the percentage from the number
    return a - division(multiply(a, percent), factor);
}

int plus_percent(int a, int percent, int factor) {
    return a + division(multiply(a, percent), factor);
}

int get_percent(int a, int percent, int factor) {
    return division(multiply(a, percent), factor);
}

{-
LP formulas I'm dead inside 1000 - üêà‚õì
-}


int math::get_lp_value(int a, int b) {
    return a * b / 1000000000;
}



(
int, ;; return lp tokens
int ;; return b 
)
math::add_lp(int a, int b) method_id {
    int c = get_price();
    int b_need = division(a, c);
    int b_out = b - b_need;
    if ( b_out < 0 ) { return (-1, -1);}
    int lp_out = math::get_lp_value(a, b_need);
    return (lp_out, b_out); 
}


(
    int,  ;; a out
    int,  ;; b out
    int,  ;; fee out
    int   ;; service comission
) math::del_lp(int a) method_id {
    init_data();
    int user_percent = division(a, lp_total_supply);
    int a_out = get_percent(get_balance().pair_first(), user_percent, 1000000000);
    int b_out = get_percent(biton_balance, user_percent, 1000000000);
    int fee_out = get_percent(lp_collect_fee, user_percent, 1000000000);
    int linear_price = get_price();
    int b_in_a = division(b_out, linear_price);
    int withdraw_comission = get_percent(a_out + b_in_a, lp_withdraw_comission, 1000000000);
    a_out -= withdraw_comission;
    return (a_out, b_out, fee_out, withdraw_comission);
}





;; ton -> biton
(
    int, ;; amount out
    int, ;; market price
    int  ;; fee
) get_price_biton(int amount_traded) method_id { ;; this function returns the amount to be sent and the market price
    init_data();
    int reserve_a_initial = pair_first(get_balance()) - service_collect_fee - lp_collect_fee; ;; liq ton
    int reserve_b_initial = biton_balance; ;; liq biton
    int fee = division(multiply(amount_traded, a_service_fee), 1000);
    int amount_input = amount_traded - fee; ;; equivalent to amount_traded - service_fee(percentage)
    int k = multiply(reserve_a_initial, reserve_b_initial); ;; coefficient, needed for formulas
    int reserve_b_after_execution = division(k, reserve_a_initial + amount_input);
    int amount_out = reserve_b_initial - reserve_b_after_execution;
    int market_price = division(amount_input, amount_out);
    return (amount_out, market_price, fee);
}

;; biton -> ton
(
    int, ;; amount out
    int, ;; market price
    int  ;; fee
) get_price_ton(int amount_traded) method_id { ;; this function returns the amount to be sent and the market price
    init_data();
    int reserve_a_initial = pair_first(get_balance()) -     service_collect_fee - lp_collect_fee; ;; liq ton
    int reserve_b_initial = biton_balance; ;; liq biton
    int amount_input = amount_traded; ;; equivalent to amount_traded - service_fee(percentage)
    int k = multiply(reserve_a_initial, reserve_b_initial); ;; coefficient, needed for formulas
    int reserve_a_after_execution = division(k, reserve_b_initial + amount_input);
    int amount_out = reserve_a_initial - reserve_a_after_execution;
    int fee = division(multiply(amount_out, b_service_fee), 1000);
    amount_out -= fee;
    int market_price = division(amount_input, amount_out);
    return (amount_out, market_price, fee);
}
